【git 操作文档】
//从远程仓库克隆源码下来

1. git clone 
地址

//创建并切换到dev分支

2. git checkout -b dev


//查看工作区域的文件状态，红色表示有文件修改未处理，绿色表示已经添加到暂存区

3. git status


//将工作区域的所有变动文件添加到暂存区

4. git add -A


//提交并写提交信息(请参考规范)，

5. git commit -m "Feat: xxxx"

	
//如果你需要与上一次合并提交，请使用--amend，会弹出可编辑的提交信息，修改后:wq退出保存
	
5.1. git commit --amend


//从远程仓库抓取最新的代码放到tmp分支下

6. git fetch origin master:tmp


//将现在的分支（dev）与tmp分支合并

7. git rebase tmp

	
//如果有冲突，解决冲突
	
7.1 打开冲突的文件，手动修改代码

	
//冲突解决后再次将所有变动文件添加到暂存区
	
7.2 git add -A

	
//继续合并
	
7.3 git rebase --continue


//删除tmp分支

8. git branch -d tmp


//切换到master分支

9. git checkout master


//将现在的分支（master）与dev分支合并

10. git rebase dev

	
//如果有冲突，则停止合并
	
10.1. git rebase --abort

	
//停止合并后返退到上一提交记录
	
10.2. git reset --hard HEAD~1

	
//再将现在的分支（master）与dev分支合并
	
10.3 git rebase dev


//推到远程仓库

11. git push origin HEAD:refs/for/master


git checkout dev


//查看tag列表

12. git tag

	
//打一个新tag
	
12.1  git tag 0.0.0.1 -am ‘0.0.0.1’

	
//推送到远程仓库
	
12.2  git push origin 0.0.0.1

	
//删除tag
	
12.3  git tag -d 0.0.0.1

	
12.4  git push origin :0.0.0.1

提交信息规范

1.	Feat: 新功能或新需求开发

2.	Fix: Bug修复，有Bug单号时须注明Bug单号

3.	Docs: 文档添加或更新，主要是Markdown或其他格式的README 文本文档

4.	Style: 代码格式调整或代码规范化修改

5.	Test: 增加某一模块的单元测试代码

6.	Urgent：非正常流程紧急修复线上故障

7.	Refactor：代码重构和优化，不涉及新需求和Bug修复的代码改动，在对旧版本不兼容的情况下需要在Commit Message中单独说明




git stash  将本地修改暂存（先不提交）
git stash pop 将本地修改放出来

git log --pretty=oneline 查看线上提交日志

git reset --hard 7ee39e0303ae07ccf7f65898f52a6524749e52ec 硬回滚到指定版本
git reset --soft 7ee39e0303ae07ccf7f65898f52a6524749e52ec 软回滚到指定版本


git add -A  提交所有变化  
git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)  
git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件  
 
----------------------------------------------------------------------------------------------------------------------------------

一、配置查看
查看仓库级的config，即.git/.config，命令：git config –local -l
查看全局级的config，即C:\Users\zuoyu.ht\.gitconfig，命令：git config –global -l
查看系统级的config，即D:\Program Files\Git\etc\gitconfig，命令：git config –system -l
查看当前生效的配置，命令：git config -l，这个时候会显示最终三个配置文件计算后的配置信

二、版本回退
用git log可以查看提交历史，以便确定要回退到哪个版本。
用git reflog查看命令历史，以便确定要回到未来的哪个版本。
使用命令git reset --hard commit_id。来实现回到哪个版本(定位到commit_id)
使用命令git reset --hard HEAD^。往上回退一个版本
使用命令git reset --hard HEAD^100。往上回退一百个版本

git diff  <commit id> <commit id>	//查看两个版本修改的文件


https://www.jianshu.com/p/51f94a2a7040  merge与rebase 的区别
https://www.cnblogs.com/jing-tian/p/11154485.html pull 与 fetch 的区别


1. 查看远程仓库:

git remote -v

2. 比如 在步骤一中，我们查看到远程有一个叫origin的仓库，我们可以使用如下命令从origin远程仓库获取最新版本的代码
git fetch origin master:temp
上面代码的意思是：从远程的origin仓库的master分支下载到本地master并新建一个temp分支

3. 查看temp分支与本地原有分支的不同
git diff temp

4. 将temp分支和本地的master分支合并
git merge temp
现在，B的本地代码已经和远程仓库处于同一个版本了，于是B可以开心coding了。
最后再提一下，上面的步骤中我们创建了temp分支，如果想要删除temp分支，也是可以的，命令如下：

5. 删除temp分支
git branch -d temp


